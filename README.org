#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+OPTIONS: c:nil creator:nil d:(not "LOGBOOK") date:nil e:t email:nil f:t
#+OPTIONS: inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t tasks:t
#+OPTIONS: tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: README
#+DATE: <2016-08-24 Wed>
#+AUTHOR: Emmanuel GALLOIS
#+EMAIL: emmanuel.gallois@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.5)
#+INFOJS_OPT: view:showall toc:nil ltoc:nil mouse:underline buttons:0 path:./js/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/solarized-light.min.css" />

** Description
   This project is the answer of a challenge I've been asked for a job
   position. I decided to answer to it with the Scala language.    

   See the challenge description in the *[[file:doc/index.org][documentation]]*.
  
** Getting started
   - Make sure you have the following dependencies installed :
     - [[https://www.java.com/][Java]]  minimum version =7= (=8= recommended).
     - [[http://scala-lang.org][Scala]]  minimum version =2.10.x= (=2.11.8= recommended).
     - [[http://www.scala-sbt.org/][sbt]] version =0.13.x= (=0.13.12= recommended).
   - Clone this repository to your computer:
     : git clone https://github.com/undx/challenge.git
   You're ready, go to your cloned repository.
   
** Usage
   The project relies on simple-build-tool (sbt). The first time you'll run
   sbt in the project, all internal dependencies will be fetched.

   Here are the main targets:
   - =sbt test= :: Run the projects' tests.
   - =sbt generateDatasets= :: Build some sample datasets that you can use for
        running the application. There are five of them in the =./data/=
        folder :
     - =tiny.csv= -> 100 rows.
     - =small.csv= -> 1000 rows.
     - =medium.csv= -> 100,000 rows.
     - =large.csv= -> 1,000,000 rows.
     - =huge.csv= -> 10,000,000 rows.
  
   Other targets :

   - =sbt doc= :: Build Scaladoc of the project.
   - =sbt oneJar= :: Build a standalone jar containing code and dependencies for running the project with java
        in the target folder. To use the standalone jar:
        #+BEGIN_SRC sh
        $ java -jar target/scala-2.11/challenge_2.11-1.0.0-one-jar.jar --help
        #+END_SRC

   For /running project/ inside sbt, first step into a sbt session (=sbt=), then use the command   
   - =run <params>= :: Launch the executable. There's only one mandatory
        parameter =-f <file>=, the input source. 
     To see the list of parameters and help, just run =sbt run --help=:
        #+BEGIN_EXAMPLE
          Usage: challenge [options]

            -f, --filename <file>    input filename to process.
            -d, --department <dept>  department selection. You can select only one in HR1, HR2, etc.
            -r, --rooms <r1,r2,...>  rooms to include (A to F).
            -o, --output <path>      where to write files produced. Defaults to filename's folder.
            --help                   prints this usage text
        #+END_EXAMPLE
            Here's an example:
        #+BEGIN_EXAMPLE
        run -f data/large.csv -d HR7 -r A,C -o /home/me/tmp/challenge 
        #+END_EXAMPLE

   
